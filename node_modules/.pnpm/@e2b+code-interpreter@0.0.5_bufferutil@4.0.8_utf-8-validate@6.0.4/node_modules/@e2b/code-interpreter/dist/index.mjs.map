{"version":3,"sources":["../src/code-interpreter.ts","../src/messaging.ts","../src/utils.ts","../src/index.ts"],"sourcesContent":["import { ProcessMessage, Sandbox, SandboxOpts } from 'e2b'\nimport { Result, JupyterKernelWebSocket, Execution } from './messaging'\nimport { createDeferredPromise } from './utils'\n\ninterface Kernels {\n  [kernelID: string]: JupyterKernelWebSocket\n}\n\nexport interface CreateKernelProps {\n  cwd: string\n  kernelName?: string\n}\n\n/**\n * E2B code interpreter sandbox extension.\n */\nexport class CodeInterpreter extends Sandbox {\n  private static template = 'code-interpreter-stateful'\n\n  readonly notebook = new JupyterExtension(this)\n\n  constructor(opts?: SandboxOpts, createCalled = false) {\n    super({ template: opts?.template || CodeInterpreter.template, ...opts }, createCalled)\n  }\n\n  override async _open(opts?: { timeout?: number }) {\n    await super._open({ timeout: opts?.timeout })\n    await this.notebook.connect(opts?.timeout)\n\n    return this\n  }\n\n  override async close() {\n    await this.notebook.close()\n    await super.close()\n  }\n}\n\nexport class JupyterExtension {\n  private readonly connectedKernels: Kernels = {}\n\n  private readonly kernelIDPromise = createDeferredPromise<string>()\n  private readonly setDefaultKernelID = this.kernelIDPromise.resolve\n\n  private get defaultKernelID() {\n    return this.kernelIDPromise.promise\n  }\n\n  constructor(private sandbox: CodeInterpreter) {}\n\n  async connect(timeout?: number) {\n    return this.startConnectingToDefaultKernel(this.setDefaultKernelID, {\n      timeout\n    })\n  }\n\n  /**\n   * Executes a code cell in a notebool cell.\n   *\n   * This method sends the provided code to a specified kernel in a remote notebook for execution.\n\n   * @param code The code to be executed in the notebook cell.\n   * @param kernelID The ID of the kernel to execute the code on. If not provided, the default kernel is used.\n   * @param onStdout A callback function to handle standard output messages from the code execution.\n   * @param onStderr A callback function to handle standard error messages from the code execution.\n   * @param onResult A callback function to handle display data messages from the code execution.\n   * @param timeout The maximum time to wait for the code execution to complete, in milliseconds.\n   * @returns A promise that resolves with the result of the code execution.\n   */\n  async execCell(\n    code: string,\n    {\n      kernelID,\n      onStdout,\n      onStderr,\n      onResult,\n      timeout\n    }: {\n      kernelID?: string\n      onStdout?: (msg: ProcessMessage) => any\n      onStderr?: (msg: ProcessMessage) => any\n      onResult?: (data: Result) => any\n      timeout?: number\n    } = {}\n  ): Promise<Execution> {\n    kernelID = kernelID || (await this.defaultKernelID)\n    const ws =\n      this.connectedKernels[kernelID] ||\n      (await this.connectToKernelWS(kernelID))\n\n    return await ws.sendExecutionMessage(\n      code,\n      onStdout,\n      onStderr,\n      onResult,\n      timeout\n    )\n  }\n\n  private async startConnectingToDefaultKernel(\n    resolve: (value: string) => void,\n    opts?: { timeout?: number }\n  ) {\n    const kernelID = (\n      await this.sandbox.filesystem.read('/root/.jupyter/kernel_id', opts)\n    ).trim()\n    await this.connectToKernelWS(kernelID)\n    resolve(kernelID)\n  }\n\n  /**\n   * Connects to a kernel's WebSocket.\n   *\n   * This method establishes a WebSocket connection to the specified kernel. It is used internally\n   * to facilitate real-time communication with the kernel, enabling operations such as executing\n   * code and receiving output. The connection details are managed within the method, including\n   * the retrieval of the necessary WebSocket URL from the kernel's information.\n   *\n   * @param kernelID The unique identifier of the kernel to connect to.\n   * @throws {Error} Throws an error if the connection to the kernel's WebSocket cannot be established.\n   */\n  private async connectToKernelWS(kernelID: string) {\n    const url = `${this.sandbox.getProtocol('ws')}://${this.sandbox.getHostname(\n      8888\n    )}/api/kernels/${kernelID}/channels`\n    const ws = new JupyterKernelWebSocket(url)\n    await ws.connect()\n    this.connectedKernels[kernelID] = ws\n\n    return ws\n  }\n\n  /**\n   * Creates a new Jupyter kernel. It can be useful if you want to have multiple independent code execution environments.\n   *\n   * The kernel can be optionally configured to start in a specific working directory and/or\n   * with a specific kernel name. If no kernel name is provided, the default kernel will be used.\n   * Once the kernel is created, this method establishes a WebSocket connection to the new kernel for\n   * real-time communication.\n   *\n   * @param cwd Sets the current working directory where the kernel should start. Defaults to \"/home/user\".\n   * @param kernelName The name of the kernel to create, useful if you have multiple kernel types. If not provided, the default kernel will be used.\n   * @returns A promise that resolves with the ID of the newly created kernel.\n   * @throws {Error} Throws an error if the kernel creation fails.\n   */\n  async createKernel(\n    cwd: string = '/home/user',\n    kernelName?: string\n  ): Promise<string> {\n    const data: CreateKernelProps = { cwd }\n    if (kernelName) {\n      data.kernelName = kernelName\n    }\n\n    const response = await fetch(\n      `${this.sandbox.getProtocol()}://${this.sandbox.getHostname(\n        8888\n      )}/api/kernels`,\n      {\n        method: 'POST',\n        body: JSON.stringify(data)\n      }\n    )\n\n    if (!response.ok) {\n      throw new Error(`Failed to create kernel: ${response.statusText}`)\n    }\n\n    const kernelID = (await response.json()).id\n    await this.connectToKernelWS(kernelID)\n    return kernelID\n  }\n\n  /**\n   * Restarts an existing Jupyter kernel. This can be useful to reset the kernel's state or to recover from errors.\n   *\n   * @param kernelID The unique identifier of the kernel to restart. If not provided, the default kernel is restarted.\n   * @throws {Error} Throws an error if the kernel restart fails or if the operation times out.\n   */\n  async restartKernel(kernelID?: string) {\n    kernelID = kernelID || (await this.defaultKernelID)\n    this.connectedKernels[kernelID].close()\n    delete this.connectedKernels[kernelID]\n\n    const response = await fetch(\n      `${this.sandbox.getProtocol()}://${this.sandbox.getHostname(\n        8888\n      )}/api/kernels/${kernelID}/restart`,\n      {\n        method: 'POST'\n      }\n    )\n\n    if (!response.ok) {\n      throw new Error(`Failed to restart kernel ${kernelID}`)\n    }\n\n    await this.connectToKernelWS(kernelID)\n  }\n\n  /**\n   * Shuts down an existing Jupyter kernel. This method is used to gracefully terminate a kernel's process.\n\n   * @param kernelID The unique identifier of the kernel to shutdown. If not provided, the default kernel is shutdown.\n   * @throws {Error} Throws an error if the kernel shutdown fails or if the operation times out.\n   */\n  async shutdownKernel(kernelID?: string) {\n    kernelID = kernelID || (await this.defaultKernelID)\n    this.connectedKernels[kernelID].close()\n    delete this.connectedKernels[kernelID]\n\n    const response = await fetch(\n      `${this.sandbox.getProtocol()}://${this.sandbox.getHostname(\n        8888\n      )}/api/kernels/${kernelID}`,\n      {\n        method: 'DELETE'\n      }\n    )\n\n    if (!response.ok) {\n      throw new Error(`Failed to shutdown kernel ${kernelID}`)\n    }\n  }\n\n  /**\n   * Lists all available Jupyter kernels.\n   *\n   * This method fetches a list of all currently available Jupyter kernels from the server. It can be used\n   * to retrieve the IDs of all kernels that are currently running or available for connection.\n   *\n   * @returns A promise that resolves to an array of kernel IDs.\n   * @throws {Error} Throws an error if the request to list kernels fails.\n   */\n  async listKernels(): Promise<string[]> {\n    const response = await fetch(\n      `${this.sandbox.getProtocol()}://${this.sandbox.getHostname(\n        8888\n      )}/api/kernels`,\n      {\n        method: 'GET'\n      }\n    )\n\n    if (!response.ok) {\n      throw new Error(`Failed to list kernels: ${response.statusText}`)\n    }\n\n    return (await response.json()).map((kernel: { id: string }) => kernel.id)\n  }\n\n  /**\n   * Close all the websocket connections to the kernels. It doesn't shutdown the kernels.\n   */\n  async close() {\n    for (const kernelID of Object.keys(this.connectedKernels)) {\n      this.connectedKernels[kernelID].close()\n    }\n  }\n}\n","import IWebSocket from 'isomorphic-ws'\nimport { ProcessMessage } from 'e2b'\nimport { id } from './utils'\n\n/**\n * Represents an error that occurred during the execution of a cell.\n * The error contains the name of the error, the value of the error, and the traceback.\n */\nexport class ExecutionError {\n  constructor(\n    /**\n     * Name of the error.\n     **/\n    public name: string,\n    /**\n     * Value of the error.\n     **/\n    public value: string,\n    /**\n     * The raw traceback of the error.\n     **/\n    public tracebackRaw: string[]\n  ) { }\n\n  /**\n   * Returns the traceback of the error as a string.\n   */\n  get traceback(): string {\n    return this.tracebackRaw.join('\\n')\n  }\n}\n\n/**\n * Represents a MIME type.\n */\nexport type MIMEType = string\n\n/**\n * Dictionary that maps MIME types to their corresponding string representations of the data.\n */\nexport type RawData = {\n  [key: MIMEType]: string\n}\n\n/**\n * Represents the data to be displayed as a result of executing a cell in a Jupyter notebook.\n * The result is similar to the structure returned by ipython kernel: https://ipython.readthedocs.io/en/stable/development/execution.html#execution-semantics\n *\n *\n * The result can contain multiple types of data, such as text, images, plots, etc. Each type of data is represented\n * as a string, and the result can contain multiple types of data. The display calls don't have to have text representation,\n * for the actual result the representation is always present for the result, the other representations are always optional.\n */\nexport class Result {\n  /**\n   * Text representation of the result.\n   */\n  readonly text?: string\n  /**\n   * HTML representation of the data.\n   */\n  readonly html?: string\n  /**\n   * Markdown representation of the data.\n   */\n  readonly markdown?: string\n  /**\n   * SVG representation of the data.\n   */\n  readonly svg?: string\n  /**\n   * PNG representation of the data.\n   */\n  readonly png?: string\n  /**\n   * JPEG representation of the data.\n   */\n  readonly jpeg?: string\n  /**\n   * PDF representation of the data.\n   */\n  readonly pdf?: string\n  /**\n   * LaTeX representation of the data.\n   */\n  readonly latex?: string\n  /**\n   * JSON representation of the data.\n   */\n  readonly json?: string\n  /**\n   * JavaScript representation of the data.\n   */\n  readonly javascript?: string\n  /**\n   * Extra data that can be included. Not part of the standard types.\n   */\n  readonly extra?: any\n\n  readonly raw: RawData\n\n  constructor(data: RawData, public readonly isMainResult: boolean) {\n    this.text = data['text/plain']\n    this.html = data['text/html']\n    this.markdown = data['text/markdown']\n    this.svg = data['image/svg+xml']\n    this.png = data['image/png']\n    this.jpeg = data['image/jpeg']\n    this.pdf = data['application/pdf']\n    this.latex = data['text/latex']\n    this.json = data['application/json']\n    this.javascript = data['application/javascript']\n    this.isMainResult = isMainResult\n    this.raw = data\n\n    this.extra = {}\n    for (const key of Object.keys(data)) {\n      if (\n        ![\n          'text/plain',\n          'text/html',\n          'text/markdown',\n          'image/svg+xml',\n          'image/png',\n          'image/jpeg',\n          'application/pdf',\n          'text/latex',\n          'application/json',\n          'application/javascript'\n        ].includes(key)\n      ) {\n        this.extra[key] = data[key]\n      }\n    }\n  }\n\n  /**\n   * Returns all the formats available for the result.\n   *\n   * @returns Array of strings representing the formats available for the result.\n   */\n  formats(): string[] {\n    const formats = []\n    if (this.html) {\n      formats.push('html')\n    }\n    if (this.markdown) {\n      formats.push('markdown')\n    }\n    if (this.svg) {\n      formats.push('svg')\n    }\n    if (this.png) {\n      formats.push('png')\n    }\n    if (this.jpeg) {\n      formats.push('jpeg')\n    }\n    if (this.pdf) {\n      formats.push('pdf')\n    }\n    if (this.latex) {\n      formats.push('latex')\n    }\n    if (this.json) {\n      formats.push('json')\n    }\n    if (this.javascript) {\n      formats.push('javascript')\n    }\n\n    for (const key of Object.keys(this.extra)) {\n      formats.push(key)\n    }\n\n    return formats\n  }\n\n  /**\n   * Returns the serializable representation of the result.\n   */\n  toJSON() {\n    return {\n      text: this.text,\n      html: this.html,\n      markdown: this.markdown,\n      svg: this.svg,\n      png: this.png,\n      jpeg: this.jpeg,\n      pdf: this.pdf,\n      latex: this.latex,\n      json: this.json,\n      javascript: this.javascript,\n      ...(Object.keys(this.extra).length > 0 ? { extra: this.extra } : {})\n    }\n  }\n}\n\n/**\n * Data printed to stdout and stderr during execution, usually by print statements, logs, warnings, subprocesses, etc.\n */\nexport type Logs = {\n  /**\n   * List of strings printed to stdout by prints, subprocesses, etc.\n   */\n  stdout: string[]\n  /**\n   * List of strings printed to stderr by prints, subprocesses, etc.\n   */\n  stderr: string[]\n}\n\n/**\n * Represents the result of a cell execution.\n */\nexport class Execution {\n  constructor(\n    /**\n     * List of result of the cell (interactively interpreted last line), display calls (e.g. matplotlib plots).\n     */\n    public results: Result[],\n    /**\n     * Logs printed to stdout and stderr during execution.\n     */\n    public logs: Logs,\n    /**\n     * An Error object if an error occurred, null otherwise.\n     */\n    public error?: ExecutionError\n  ) { }\n\n  /**\n   * Returns the text representation of the main result of the cell.\n   */\n  get text(): string | undefined {\n    for (const data of this.results) {\n      if (data.isMainResult) {\n        return data.text\n      }\n    }\n  }\n\n  /**\n   * Returns the serializable representation of the execution result.\n   */\n  toJSON() {\n    return {\n      results: this.results,\n      logs: this.logs,\n      error: this.error\n    }\n  }\n}\n\n/**\n * Represents the execution of a cell in the Jupyter kernel.\n * It's an internal class used by JupyterKernelWebSocket.\n */\nclass CellExecution {\n  execution: Execution\n  onStdout?: (out: ProcessMessage) => any\n  onStderr?: (out: ProcessMessage) => any\n  onResult?: (data: Result) => any\n  inputAccepted: boolean = false\n\n  constructor(\n    onStdout?: (out: ProcessMessage) => any,\n    onStderr?: (out: ProcessMessage) => any,\n    onResult?: (data: Result) => any\n  ) {\n    this.execution = new Execution([], { stdout: [], stderr: [] })\n    this.onStdout = onStdout\n    this.onStderr = onStderr\n    this.onResult = onResult\n  }\n}\n\ninterface Cells {\n  [id: string]: CellExecution\n}\n\nexport class JupyterKernelWebSocket {\n  // native websocket\n  private _ws?: IWebSocket\n\n  private set ws(ws: IWebSocket) {\n    this._ws = ws\n  }\n\n  private get ws() {\n    if (!this._ws) {\n      throw new Error('WebSocket is not connected.')\n    }\n    return this._ws\n  }\n\n  private idAwaiter: {\n    [id: string]: (data?: any) => void\n  } = {}\n\n  private cells: Cells = {}\n\n  // constructor\n  /**\n   * Does not start WebSocket connection!\n   * You need to call connect() method first.\n   */\n  constructor(private readonly url: string) { }\n\n  // public\n  /**\n   * Starts WebSocket connection.\n   */\n  connect() {\n    this._ws = new IWebSocket(this.url)\n    return this.listen()\n  }\n\n  // events\n  /**\n   * Listens for messages from WebSocket server.\n   *\n   * Message types:\n   * https://jupyter-client.readthedocs.io/en/stable/messaging.html\n   *\n   */\n  public listenMessages() {\n    this.ws.onmessage = (e: IWebSocket.MessageEvent) => {\n      const message = JSON.parse(e.data.toString())\n      const parentMsgId = message.parent_header.msg_id\n      const cell = this.cells[parentMsgId]\n      if (!cell) {\n        return\n      }\n\n      const execution = cell.execution\n      if (message.msg_type == 'error') {\n        execution.error = new ExecutionError(\n          message.content.ename,\n          message.content.evalue,\n          message.content.traceback\n        )\n      } else if (message.msg_type == 'stream') {\n        if (message.content.name == 'stdout') {\n          execution.logs.stdout.push(message.content.text)\n          if (cell?.onStdout) {\n            cell.onStdout(\n              new ProcessMessage(\n                message.content.text,\n                new Date().getTime() * 1_000_000,\n                false\n              )\n            )\n          }\n        } else if (message.content.name == 'stderr') {\n          execution.logs.stderr.push(message.content.text)\n          if (cell?.onStderr) {\n            cell.onStderr(\n              new ProcessMessage(\n                message.content.text,\n                new Date().getTime() * 1_000_000,\n                true\n              )\n            )\n          }\n        }\n      } else if (message.msg_type == 'display_data') {\n        const result = new Result(message.content.data, false)\n        execution.results.push(result)\n        if (cell.onResult) {\n          cell.onResult(result)\n        }\n      } else if (message.msg_type == 'execute_result') {\n        const result = new Result(message.content.data, true)\n        execution.results.push(result)\n        if (cell.onResult) {\n          cell.onResult(result)\n        }\n      } else if (message.msg_type == 'status') {\n        if (message.content.execution_state == 'idle') {\n          if (cell.inputAccepted) {\n            this.idAwaiter[parentMsgId](execution)\n          }\n        } else if (message.content.execution_state == 'error') {\n          execution.error = new ExecutionError(\n            message.content.ename,\n            message.content.evalue,\n            message.content.traceback\n          )\n          this.idAwaiter[parentMsgId](execution)\n        }\n      } else if (message.msg_type == 'execute_reply') {\n        if (message.content.status == 'error') {\n          execution.error = new ExecutionError(\n            message.content.ename,\n            message.content.evalue,\n            message.content.traceback\n          )\n        } else if (message.content.status == 'ok') {\n          return\n        }\n      } else if (message.msg_type == 'execute_input') {\n        cell.inputAccepted = true\n      } else {\n        console.warn('[UNHANDLED MESSAGE TYPE]:', message.msg_type)\n      }\n    }\n  }\n\n  // communication\n  /**\n   * Sends code to be executed by Jupyter kernel.\n   * @param code Code to be executed.\n   * @param onStdout Callback for stdout messages.\n   * @param onStderr Callback for stderr messages.\n   * @param onResult Callback function to handle the result and display calls of the code execution.\n   * @param timeout Time in milliseconds to wait for response.\n   * @returns Promise with execution result.\n   */\n  public sendExecutionMessage(\n    code: string,\n    onStdout?: (out: ProcessMessage) => any,\n    onStderr?: (out: ProcessMessage) => any,\n    onResult?: (data: Result) => any,\n    timeout?: number\n  ) {\n    return new Promise<Execution>((resolve, reject) => {\n      const msg_id = id(16)\n      const data = this.sendExecuteRequest(msg_id, code)\n\n      // give limited time for response\n      let timeoutSet: number | NodeJS.Timeout\n      if (timeout) {\n        timeoutSet = setTimeout(() => {\n          // stop waiting for response\n          delete this.idAwaiter[msg_id]\n          reject(\n            new Error(\n              `Awaiting response to \"${code}\" with id: ${msg_id} timed out.`\n            )\n          )\n        }, timeout)\n      }\n\n      // expect response\n      this.cells[msg_id] = new CellExecution(onStdout, onStderr, onResult)\n      this.idAwaiter[msg_id] = (responseData: Execution) => {\n        // stop timeout\n        clearInterval(timeoutSet as number)\n        // stop waiting for response\n        delete this.idAwaiter[msg_id]\n\n        resolve(responseData)\n      }\n\n      const json = JSON.stringify(data)\n      this.ws.send(json)\n    })\n  }\n\n  /**\n   * Listens for messages from WebSocket server.\n   */\n  private listen() {\n    return new Promise((resolve, reject) => {\n      this.ws.onopen = (e: unknown) => {\n        resolve(e)\n      }\n\n      // listen for messages\n      this.listenMessages()\n\n      this.ws.onclose = (e: IWebSocket.CloseEvent) => {\n        reject(\n          new Error(\n            `WebSocket closed with code: ${e.code} and reason: ${e.reason}`\n          )\n        )\n      }\n    })\n  }\n\n  /**\n   * Creates a websocket message for code execution.\n   * @param msg_id Unique message id.\n   * @param code Code to be executed.\n   */\n  private sendExecuteRequest(msg_id: string, code: string) {\n    const session = id(16)\n    return {\n      header: {\n        msg_id: msg_id,\n        username: 'e2b',\n        session: session,\n        msg_type: 'execute_request',\n        version: '5.3'\n      },\n      parent_header: {},\n      metadata: {},\n      content: {\n        code: code,\n        silent: false,\n        store_history: false,\n        user_expressions: {},\n        allow_stdin: false\n      }\n    }\n  }\n\n  /**\n   * Closes WebSocket connection.\n   */\n  close() {\n    this.ws.close()\n  }\n}\n","export function createDeferredPromise<T = void>() {\n  let resolve: (value: T) => void\n  let reject: (reason?: unknown) => void\n  const promise = new Promise<T>((res, rej) => {\n    resolve = res\n    reject = rej\n  })\n\n  return {\n    promise,\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    reject: reject!,\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    resolve: resolve!\n  }\n}\n\nexport function id(length: number) {\n  let result = ''\n  const characters =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n  const charactersLength = characters.length\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength))\n  }\n  return result\n}\n","export { CodeInterpreter, JupyterExtension } from './code-interpreter'\nexport type { CreateKernelProps } from './code-interpreter'\n\nexport type { Logs, ExecutionError, Result, Execution, MIMEType, RawData } from './messaging'\n\nimport { CodeInterpreter } from './code-interpreter'\n\nexport * from 'e2b'\n\nexport default CodeInterpreter"],"mappings":"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","names":[]}