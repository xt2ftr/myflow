"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "LlamaCloudIndex", {
    enumerable: true,
    get: function() {
        return LlamaCloudIndex;
    }
});
const _cloud = require("@llamaindex/cloud");
const _RetrieverQueryEngine = require("../engines/query/RetrieverQueryEngine.js");
const _LlamaCloudRetriever = require("./LlamaCloudRetriever.js");
const _config = require("./config.js");
const _utils = require("./utils.js");
const _env = require("@llamaindex/env");
const _OpenAIEmbedding = require("../embeddings/OpenAIEmbedding.js");
const _SimpleNodeParser = require("../nodeParsers/SimpleNodeParser.js");
class LlamaCloudIndex {
    params;
    constructor(params){
        this.params = params;
    }
    static async fromDocuments(params) {
        const defaultTransformations = [
            new _OpenAIEmbedding.OpenAIEmbedding({
                apiKey: (0, _env.getEnv)("OPENAI_API_KEY")
            }),
            new _SimpleNodeParser.SimpleNodeParser()
        ];
        const appUrl = (0, _utils.getAppBaseUrl)(params.baseUrl);
        const client = await (0, _utils.getClient)({
            ...params,
            baseUrl: appUrl
        });
        const pipelineCreateParams = await (0, _config.getPipelineCreate)({
            pipelineName: params.name,
            pipelineType: "MANAGED",
            inputNodes: params.documents,
            transformations: params.transformations ?? defaultTransformations
        });
        const project = await client.project.upsertProject({
            name: params.projectName ?? "default"
        });
        if (!project.id) {
            throw new Error("Project ID should be defined");
        }
        const pipeline = await client.project.upsertPipelineForProject(project.id, pipelineCreateParams);
        if (!pipeline.id) {
            throw new Error("Pipeline ID must be defined");
        }
        if (params.verbose) {
            console.log(`Created pipeline ${pipeline.id} with name ${params.name}`);
        }
        const executionsIds = [];
        for (const dataSource of pipeline.dataSources){
            const dataSourceExection = await client.dataSource.createDataSourceExecution(dataSource.id);
            if (!dataSourceExection.id) {
                throw new Error("Data Source Execution ID must be defined");
            }
            executionsIds.push({
                exectionId: dataSourceExection.id,
                dataSourceId: dataSource.id
            });
        }
        let isDone = false;
        while(!isDone){
            const statuses = [];
            for await (const execution of executionsIds){
                const dataSourceExecution = await client.dataSource.getDataSourceExecution(execution.dataSourceId, execution.exectionId);
                statuses.push(dataSourceExecution.status);
                if (statuses.every((status)=>status === _cloud.PlatformApi.StatusEnum.Success)) {
                    isDone = true;
                    if (params.verbose) {
                        console.info("Data Source Execution completed");
                    }
                    break;
                } else if (statuses.some((status)=>status === _cloud.PlatformApi.StatusEnum.Error)) {
                    throw new Error("Data Source Execution failed");
                } else {
                    await new Promise((resolve)=>setTimeout(resolve, 1000));
                    if (params.verbose) {
                        process.stdout.write(".");
                    }
                }
            }
        }
        isDone = false;
        const execution = await client.pipeline.runManagedPipelineIngestion(pipeline.id);
        const ingestionId = execution.id;
        if (!ingestionId) {
            throw new Error("Ingestion ID must be defined");
        }
        while(!isDone){
            const pipelineStatus = await client.pipeline.getManagedIngestionExecution(pipeline.id, ingestionId);
            if (pipelineStatus.status === _cloud.PlatformApi.StatusEnum.Success) {
                isDone = true;
                if (params.verbose) {
                    console.info("Ingestion completed");
                }
                break;
            } else if (pipelineStatus.status === _cloud.PlatformApi.StatusEnum.Error) {
                throw new Error("Ingestion failed");
            } else {
                await new Promise((resolve)=>setTimeout(resolve, 1000));
                if (params.verbose) {
                    process.stdout.write(".");
                }
            }
        }
        if (params.verbose) {
            console.info(`Ingestion completed, find your index at ${appUrl}/project/${project.id}/deploy/${pipeline.id}`);
        }
        return new LlamaCloudIndex({
            ...params
        });
    }
    asRetriever(params = {}) {
        return new _LlamaCloudRetriever.LlamaCloudRetriever({
            ...this.params,
            ...params
        });
    }
    asQueryEngine(params) {
        const retriever = new _LlamaCloudRetriever.LlamaCloudRetriever({
            ...this.params,
            ...params
        });
        return new _RetrieverQueryEngine.RetrieverQueryEngine(retriever, params?.responseSynthesizer, params?.preFilters, params?.nodePostprocessors);
    }
}
