function applyDecs2203RFactory() {
    function createAddInitializerMethod(initializers, decoratorFinishedRef) {
        return function addInitializer(initializer) {
            assertNotFinished(decoratorFinishedRef, "addInitializer");
            assertCallable(initializer, "An initializer");
            initializers.push(initializer);
        };
    }
    function memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value) {
        var kindStr;
        switch(kind){
            case 1:
                kindStr = "accessor";
                break;
            case 2:
                kindStr = "method";
                break;
            case 3:
                kindStr = "getter";
                break;
            case 4:
                kindStr = "setter";
                break;
            default:
                kindStr = "field";
        }
        var ctx = {
            kind: kindStr,
            name: isPrivate ? "#" + name : name,
            static: isStatic,
            private: isPrivate,
            metadata: metadata
        };
        var decoratorFinishedRef = {
            v: false
        };
        ctx.addInitializer = createAddInitializerMethod(initializers, decoratorFinishedRef);
        var get, set;
        if (kind === 0) {
            if (isPrivate) {
                get = desc.get;
                set = desc.set;
            } else {
                get = function() {
                    return this[name];
                };
                set = function(v) {
                    this[name] = v;
                };
            }
        } else if (kind === 2) {
            get = function() {
                return desc.value;
            };
        } else {
            if (kind === 1 || kind === 3) {
                get = function() {
                    return desc.get.call(this);
                };
            }
            if (kind === 1 || kind === 4) {
                set = function(v) {
                    desc.set.call(this, v);
                };
            }
        }
        ctx.access = get && set ? {
            get: get,
            set: set
        } : get ? {
            get: get
        } : {
            set: set
        };
        try {
            return dec(value, ctx);
        } finally{
            decoratorFinishedRef.v = true;
        }
    }
    function assertNotFinished(decoratorFinishedRef, fnName) {
        if (decoratorFinishedRef.v) {
            throw new Error("attempted to call " + fnName + " after decoration was finished");
        }
    }
    function assertCallable(fn, hint) {
        if (typeof fn !== "function") {
            throw new TypeError(hint + " must be a function");
        }
    }
    function assertValidReturnValue(kind, value) {
        var type = typeof value;
        if (kind === 1) {
            if (type !== "object" || value === null) {
                throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");
            }
            if (value.get !== undefined) {
                assertCallable(value.get, "accessor.get");
            }
            if (value.set !== undefined) {
                assertCallable(value.set, "accessor.set");
            }
            if (value.init !== undefined) {
                assertCallable(value.init, "accessor.init");
            }
        } else if (type !== "function") {
            var hint;
            if (kind === 0) {
                hint = "field";
            } else if (kind === 10) {
                hint = "class";
            } else {
                hint = "method";
            }
            throw new TypeError(hint + " decorators must return a function or void 0");
        }
    }
    function applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata) {
        var decs = decInfo[0];
        var desc, init, value;
        if (isPrivate) {
            if (kind === 0 || kind === 1) {
                desc = {
                    get: decInfo[3],
                    set: decInfo[4]
                };
            } else if (kind === 3) {
                desc = {
                    get: decInfo[3]
                };
            } else if (kind === 4) {
                desc = {
                    set: decInfo[3]
                };
            } else {
                desc = {
                    value: decInfo[3]
                };
            }
        } else if (kind !== 0) {
            desc = Object.getOwnPropertyDescriptor(base, name);
        }
        if (kind === 1) {
            value = {
                get: desc.get,
                set: desc.set
            };
        } else if (kind === 2) {
            value = desc.value;
        } else if (kind === 3) {
            value = desc.get;
        } else if (kind === 4) {
            value = desc.set;
        }
        var newValue, get, set;
        if (typeof decs === "function") {
            newValue = memberDec(decs, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);
            if (newValue !== void 0) {
                assertValidReturnValue(kind, newValue);
                if (kind === 0) {
                    init = newValue;
                } else if (kind === 1) {
                    init = newValue.init;
                    get = newValue.get || value.get;
                    set = newValue.set || value.set;
                    value = {
                        get: get,
                        set: set
                    };
                } else {
                    value = newValue;
                }
            }
        } else {
            for(var i = decs.length - 1; i >= 0; i--){
                var dec = decs[i];
                newValue = memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);
                if (newValue !== void 0) {
                    assertValidReturnValue(kind, newValue);
                    var newInit;
                    if (kind === 0) {
                        newInit = newValue;
                    } else if (kind === 1) {
                        newInit = newValue.init;
                        get = newValue.get || value.get;
                        set = newValue.set || value.set;
                        value = {
                            get: get,
                            set: set
                        };
                    } else {
                        value = newValue;
                    }
                    if (newInit !== void 0) {
                        if (init === void 0) {
                            init = newInit;
                        } else if (typeof init === "function") {
                            init = [
                                init,
                                newInit
                            ];
                        } else {
                            init.push(newInit);
                        }
                    }
                }
            }
        }
        if (kind === 0 || kind === 1) {
            if (init === void 0) {
                init = function(instance, init) {
                    return init;
                };
            } else if (typeof init !== "function") {
                var ownInitializers = init;
                init = function(instance, init) {
                    var value = init;
                    for(var i = 0; i < ownInitializers.length; i++){
                        value = ownInitializers[i].call(instance, value);
                    }
                    return value;
                };
            } else {
                var originalInitializer = init;
                init = function(instance, init) {
                    return originalInitializer.call(instance, init);
                };
            }
            ret.push(init);
        }
        if (kind !== 0) {
            if (kind === 1) {
                desc.get = value.get;
                desc.set = value.set;
            } else if (kind === 2) {
                desc.value = value;
            } else if (kind === 3) {
                desc.get = value;
            } else if (kind === 4) {
                desc.set = value;
            }
            if (isPrivate) {
                if (kind === 1) {
                    ret.push(function(instance, args) {
                        return value.get.call(instance, args);
                    });
                    ret.push(function(instance, args) {
                        return value.set.call(instance, args);
                    });
                } else if (kind === 2) {
                    ret.push(value);
                } else {
                    ret.push(function(instance, args) {
                        return value.call(instance, args);
                    });
                }
            } else {
                Object.defineProperty(base, name, desc);
            }
        }
    }
    function applyMemberDecs(Class, decInfos, metadata) {
        var ret = [];
        var protoInitializers;
        var staticInitializers;
        var existingProtoNonFields = new Map();
        var existingStaticNonFields = new Map();
        for(var i = 0; i < decInfos.length; i++){
            var decInfo = decInfos[i];
            if (!Array.isArray(decInfo)) continue;
            var kind = decInfo[1];
            var name = decInfo[2];
            var isPrivate = decInfo.length > 3;
            var isStatic = kind >= 5;
            var base;
            var initializers;
            if (isStatic) {
                base = Class;
                kind = kind - 5;
                staticInitializers = staticInitializers || [];
                initializers = staticInitializers;
            } else {
                base = Class.prototype;
                protoInitializers = protoInitializers || [];
                initializers = protoInitializers;
            }
            if (kind !== 0 && !isPrivate) {
                var existingNonFields = isStatic ? existingStaticNonFields : existingProtoNonFields;
                var existingKind = existingNonFields.get(name) || 0;
                if (existingKind === true || existingKind === 3 && kind !== 4 || existingKind === 4 && kind !== 3) {
                    throw new Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: " + name);
                } else if (!existingKind && kind > 2) {
                    existingNonFields.set(name, kind);
                } else {
                    existingNonFields.set(name, true);
                }
            }
            applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata);
        }
        pushInitializers(ret, protoInitializers);
        pushInitializers(ret, staticInitializers);
        return ret;
    }
    function pushInitializers(ret, initializers) {
        if (initializers) {
            ret.push(function(instance) {
                for(var i = 0; i < initializers.length; i++){
                    initializers[i].call(instance);
                }
                return instance;
            });
        }
    }
    function applyClassDecs(targetClass, classDecs, metadata) {
        if (classDecs.length > 0) {
            var initializers = [];
            var newClass = targetClass;
            var name = targetClass.name;
            for(var i = classDecs.length - 1; i >= 0; i--){
                var decoratorFinishedRef = {
                    v: false
                };
                try {
                    var nextNewClass = classDecs[i](newClass, {
                        kind: "class",
                        name: name,
                        addInitializer: createAddInitializerMethod(initializers, decoratorFinishedRef),
                        metadata
                    });
                } finally{
                    decoratorFinishedRef.v = true;
                }
                if (nextNewClass !== undefined) {
                    assertValidReturnValue(10, nextNewClass);
                    newClass = nextNewClass;
                }
            }
            return [
                defineMetadata(newClass, metadata),
                function() {
                    for(var i = 0; i < initializers.length; i++){
                        initializers[i].call(newClass);
                    }
                }
            ];
        }
    }
    function defineMetadata(Class, metadata) {
        return Object.defineProperty(Class, Symbol.metadata || Symbol.for("Symbol.metadata"), {
            configurable: true,
            enumerable: true,
            value: metadata
        });
    }
    return function applyDecs2203R(targetClass, memberDecs, classDecs, parentClass) {
        if (parentClass !== void 0) {
            var parentMetadata = parentClass[Symbol.metadata || Symbol.for("Symbol.metadata")];
        }
        var metadata = Object.create(parentMetadata === void 0 ? null : parentMetadata);
        var e = applyMemberDecs(targetClass, memberDecs, metadata);
        if (!classDecs.length) defineMetadata(targetClass, metadata);
        return {
            e: e,
            get c () {
                return applyClassDecs(targetClass, classDecs, metadata);
            }
        };
    };
}
function _apply_decs_2203_r(targetClass, memberDecs, classDecs, parentClass) {
    return (_apply_decs_2203_r = applyDecs2203RFactory())(targetClass, memberDecs, classDecs, parentClass);
}
var _initProto;
import { Anthropic as SDKAnthropic } from "@anthropic-ai/sdk";
import { getEnv } from "@llamaindex/env";
import _ from "lodash";
import { ToolCallLLM } from "./base.js";
import { extractText, wrapLLMEvent } from "./utils.js";
export class AnthropicSession {
    anthropic;
    constructor(options = {}){
        if (!options.apiKey) {
            options.apiKey = getEnv("ANTHROPIC_API_KEY");
        }
        if (!options.apiKey) {
            throw new Error("Set Anthropic Key in ANTHROPIC_API_KEY env variable");
        }
        this.anthropic = new SDKAnthropic(options);
    }
}
// I'm not 100% sure this is necessary vs. just starting a new session
// every time we make a call. They say they try to reuse connections
// so in theory this is more efficient, but we should test it in the future.
const defaultAnthropicSession = [];
/**
 * Get a session for the Anthropic API. If one already exists with the same options,
 * it will be returned. Otherwise, a new session will be created.
 * @param options
 * @returns
 */ export function getAnthropicSession(options = {}) {
    let session = defaultAnthropicSession.find((session)=>{
        return _.isEqual(session.options, options);
    })?.session;
    if (!session) {
        session = new AnthropicSession(options);
        defaultAnthropicSession.push({
            session,
            options
        });
    }
    return session;
}
export const ALL_AVAILABLE_ANTHROPIC_LEGACY_MODELS = {
    "claude-2.1": {
        contextWindow: 200000
    },
    "claude-instant-1.2": {
        contextWindow: 100000
    }
};
export const ALL_AVAILABLE_V3_MODELS = {
    "claude-3-opus": {
        contextWindow: 200000
    },
    "claude-3-sonnet": {
        contextWindow: 200000
    },
    "claude-3-haiku": {
        contextWindow: 200000
    }
};
export const ALL_AVAILABLE_ANTHROPIC_MODELS = {
    ...ALL_AVAILABLE_ANTHROPIC_LEGACY_MODELS,
    ...ALL_AVAILABLE_V3_MODELS
};
const AVAILABLE_ANTHROPIC_MODELS_WITHOUT_DATE = {
    "claude-3-opus": "claude-3-opus-20240229",
    "claude-3-sonnet": "claude-3-sonnet-20240229",
    "claude-3-haiku": "claude-3-haiku-20240307"
};
export class Anthropic extends ToolCallLLM {
    static{
        ({ e: [_initProto] } = _apply_decs_2203_r(this, [
            [
                wrapLLMEvent,
                2,
                "chat"
            ]
        ], []));
    }
    // Per completion Anthropic params
    model;
    temperature;
    topP;
    maxTokens;
    // Anthropic session params
    apiKey = undefined;
    maxRetries;
    timeout;
    session;
    constructor(init){
        super();
        _initProto(this);
        this.model = init?.model ?? "claude-3-opus";
        this.temperature = init?.temperature ?? 0.1;
        this.topP = init?.topP ?? 0.999; // Per Ben Mann
        this.maxTokens = init?.maxTokens ?? undefined;
        this.apiKey = init?.apiKey ?? undefined;
        this.maxRetries = init?.maxRetries ?? 10;
        this.timeout = init?.timeout ?? 60 * 1000; // Default is 60 seconds
        this.session = init?.session ?? getAnthropicSession({
            apiKey: this.apiKey,
            maxRetries: this.maxRetries,
            timeout: this.timeout
        });
    }
    get supportToolCall() {
        return this.model.startsWith("claude-3");
    }
    get metadata() {
        return {
            model: this.model,
            temperature: this.temperature,
            topP: this.topP,
            maxTokens: this.maxTokens,
            contextWindow: ALL_AVAILABLE_ANTHROPIC_MODELS[this.model].contextWindow,
            tokenizer: undefined
        };
    }
    getModelName = (model)=>{
        if (Object.keys(AVAILABLE_ANTHROPIC_MODELS_WITHOUT_DATE).includes(model)) {
            return AVAILABLE_ANTHROPIC_MODELS_WITHOUT_DATE[model];
        }
        return model;
    };
    formatMessages(messages) {
        const result = messages.filter((message)=>message.role === "user" || message.role === "assistant").map((message)=>{
            const options = message.options ?? {};
            if ("toolResult" in options) {
                const { id, isError } = options.toolResult;
                return {
                    role: "user",
                    content: [
                        {
                            type: "tool_result",
                            is_error: isError,
                            content: [
                                {
                                    type: "text",
                                    text: extractText(message.content)
                                }
                            ],
                            tool_use_id: id
                        }
                    ]
                };
            } else if ("toolCall" in options) {
                const aiThinkingText = extractText(message.content);
                return {
                    role: "assistant",
                    content: [
                        // this could be empty when you call two tools in one query
                        ...aiThinkingText.trim() ? [
                            {
                                type: "text",
                                text: aiThinkingText
                            }
                        ] : [],
                        {
                            type: "tool_use",
                            id: options.toolCall.id,
                            name: options.toolCall.name,
                            input: options.toolCall.input
                        }
                    ]
                };
            }
            return {
                content: extractText(message.content),
                role: message.role
            };
        });
        // merge messages with the same role
        // in case of 'messages: roles must alternate between "user" and "assistant", but found multiple "user" roles in a row'
        const realResult = [];
        for(let i = 0; i < result.length; i++){
            if (i === 0) {
                realResult.push(result[i]);
                continue;
            }
            const current = result[i];
            const previous = result[i - 1];
            if (current.role === previous.role) {
                // merge two messages with the same role
                if (Array.isArray(previous.content)) {
                    if (Array.isArray(current.content)) {
                        previous.content.push(...current.content);
                    } else {
                        previous.content.push({
                            type: "text",
                            text: current.content
                        });
                    }
                } else {
                    if (Array.isArray(current.content)) {
                        previous.content = [
                            {
                                type: "text",
                                text: previous.content
                            },
                            ...current.content
                        ];
                    } else {
                        previous.content += `\n${current.content}`;
                    }
                }
            // no need to push the message
            } else {
                realResult.push(current);
            }
        }
        return realResult;
    }
    async chat(params) {
        let { messages } = params;
        const { stream, tools } = params;
        let systemPrompt = null;
        const systemMessages = messages.filter((message)=>message.role === "system");
        if (systemMessages.length > 0) {
            systemPrompt = systemMessages.map((message)=>message.content).join("\n");
            messages = messages.filter((message)=>message.role !== "system");
        }
        // case: Streaming
        if (stream) {
            if (tools) {
                console.error("Tools are not supported in streaming mode");
            }
            return this.streamChat(messages, systemPrompt);
        }
        // case: Non-streaming
        const anthropic = this.session.anthropic;
        if (tools) {
            const params = {
                messages: this.formatMessages(messages),
                tools: tools.map(Anthropic.toTool),
                model: this.getModelName(this.model),
                temperature: this.temperature,
                max_tokens: this.maxTokens ?? 4096,
                top_p: this.topP,
                ...systemPrompt && {
                    system: systemPrompt
                }
            };
            // Remove tools if there are none, as it will cause an error
            if (tools.length === 0) {
                delete params.tools;
            }
            const response = await anthropic.beta.tools.messages.create(params);
            const toolUseBlock = response.content.find((content)=>content.type === "tool_use");
            return {
                raw: response,
                message: {
                    content: response.content.filter((content)=>content.type === "text").map((content)=>({
                            type: "text",
                            text: content.text
                        })),
                    role: "assistant",
                    options: toolUseBlock ? {
                        toolCall: {
                            id: toolUseBlock.id,
                            name: toolUseBlock.name,
                            input: toolUseBlock.input
                        }
                    } : {}
                }
            };
        } else {
            const response = await anthropic.messages.create({
                model: this.getModelName(this.model),
                messages: this.formatMessages(messages),
                max_tokens: this.maxTokens ?? 4096,
                temperature: this.temperature,
                top_p: this.topP,
                ...systemPrompt && {
                    system: systemPrompt
                }
            });
            return {
                raw: response,
                message: {
                    content: response.content[0].text,
                    role: "assistant",
                    options: {}
                }
            };
        }
    }
    async *streamChat(messages, systemPrompt) {
        const stream = await this.session.anthropic.messages.create({
            model: this.getModelName(this.model),
            messages: this.formatMessages(messages),
            max_tokens: this.maxTokens ?? 4096,
            temperature: this.temperature,
            top_p: this.topP,
            stream: true,
            ...systemPrompt && {
                system: systemPrompt
            }
        });
        let idx_counter = 0;
        for await (const part of stream){
            const content = part.type === "content_block_delta" ? part.delta.text : null;
            if (typeof content !== "string") continue;
            idx_counter++;
            yield {
                raw: part,
                delta: content,
                options: {}
            };
        }
        return;
    }
    static toTool(tool) {
        if (tool.metadata.parameters?.type !== "object") {
            throw new TypeError("Tool parameters must be an object");
        }
        return {
            input_schema: {
                type: "object",
                properties: tool.metadata.parameters.properties,
                required: tool.metadata.parameters.required
            },
            name: tool.metadata.name,
            description: tool.metadata.description
        };
    }
}
