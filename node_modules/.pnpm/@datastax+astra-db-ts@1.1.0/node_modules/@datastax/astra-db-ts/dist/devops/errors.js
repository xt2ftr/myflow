"use strict";
// Copyright DataStax, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.DevOpsUnexpectedStateError = exports.DevOpsAPIResponseError = exports.DevOpsAPITimeoutError = exports.DevOpsAPIError = void 0;
const utils_1 = require("../api/utils");
/**
 * An abstract class representing *some* exception that occurred related to the DevOps API. This is the base class for all
 * DevOps API errors, and will never be thrown directly.
 *
 * Useful for `instanceof` checks.
 *
 * @public
 */
class DevOpsAPIError extends Error {
}
exports.DevOpsAPIError = DevOpsAPIError;
/**
 * An error thrown when an admin operation timed out.
 *
 * Depending on the method, this may be a request timeout occurring during a specific HTTP request, or can happen over
 * the course of a method involving several requests in a row, such as a blocking `createDatabase`.
 *
 * @field url - The URL that the request was made to.
 * @field timeout - The timeout that was set for the operation, in milliseconds.
 *
 * @public
 */
class DevOpsAPITimeoutError extends DevOpsAPIError {
    /**
     * Shouldn't be instantiated directly.
     *
     * @internal
     */
    constructor(url, timeout) {
        super(`Command timed out after ${timeout}ms`);
        /**
         * The URL that the request was made to.
         */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         The timeout that was set for the operation, in milliseconds.
         */
        Object.defineProperty(this, "timeout", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.url = url;
        this.timeout = timeout;
        this.name = 'DevOpsAPITimeoutError';
    }
}
exports.DevOpsAPITimeoutError = DevOpsAPITimeoutError;
/**
 * An error representing a response from the DevOps API that was not successful (non-2XX status code).
 *
 * @field errors - The error descriptors returned by the API to describe what went wrong.
 * @field rootError - The raw axios error that was thrown.
 * @field status - The HTTP status code of the response, if available.
 *
 * @public
 */
class DevOpsAPIResponseError extends DevOpsAPIError {
    /**
     * Shouldn't be instantiated directly.
     *
     * @internal
     */
    constructor(resp, data) {
        const message = data?.errors?.find(e => e.message)?.message ?? 'Something went wrong';
        super(message);
        /**
         * The error descriptors returned by the API to describe what went wrong.
         */
        Object.defineProperty(this, "errors", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The HTTP status code of the response, if available.
         */
        Object.defineProperty(this, "status", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The "raw", errored response from the API.
         */
        Object.defineProperty(this, "raw", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.errors = extractErrorDescriptors(data);
        this.status = resp.status;
        this.raw = (0, utils_1.toCuratedApiResponse)(resp);
        this.name = 'DevOpsAPIResponseError';
    }
}
exports.DevOpsAPIResponseError = DevOpsAPIResponseError;
/**
 * Error thrown when the DevOps API returns is in an unexpected state (i.e. `'PARKED'` when `'ACTIVE'` or `'PENDING'`
 * was expected).
 *
 * @field dbInfo - The complete database info, which includes the status of the database.
 * @field status - The HTTP status code of the response, if available.
 *
 * @public
 */
class DevOpsUnexpectedStateError extends DevOpsAPIError {
    /**
     * Shouldn't be instantiated directly.
     *
     * @internal
     */
    constructor(message, expected, data) {
        super(message);
        /**
         * The expected states that were not met.
         */
        Object.defineProperty(this, "expected", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The complete database info, which includes the status of the database.
         */
        Object.defineProperty(this, "dbInfo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.expected = expected;
        this.dbInfo = data;
        this.name = 'DevOpsUnexpectedStateError';
    }
}
exports.DevOpsUnexpectedStateError = DevOpsUnexpectedStateError;
function extractErrorDescriptors(data) {
    const errors = data?.errors || [];
    return errors.map((e) => ({
        id: e.ID,
        message: e.message,
    }));
}
//# sourceMappingURL=errors.js.map