"use strict";
// Copyright DataStax, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdminCommandFailedEvent = exports.AdminCommandSucceededEvent = exports.AdminCommandPollingEvent = exports.AdminCommandStartedEvent = exports.AdminCommandEvent = void 0;
const api_1 = require("../api");
/**
 * Common base class for all admin command events.
 *
 * @public
 */
class AdminCommandEvent {
    /**
     * Should not be instantiated directly.
     *
     * @internal
     */
    constructor(info, longRunning) {
        /**
         * The path for the request, not including the Base URL.
         */
        Object.defineProperty(this, "path", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The HTTP method for the request.
         */
        Object.defineProperty(this, "method", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The request body, if any.
         */
        Object.defineProperty(this, "reqBody", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The query parameters, if any.
         */
        Object.defineProperty(this, "params", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Whether the command is long-running or not, i.e. requires polling.
         */
        Object.defineProperty(this, "longRunning", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.path = info.path;
        this.method = info.method;
        this.reqBody = info.data;
        this.params = info.params;
        this.longRunning = longRunning;
    }
}
exports.AdminCommandEvent = AdminCommandEvent;
/**
 * Event emitted when an admin command is started. This is emitted before the initial HTTP request is made.
 *
 * See {@link AdminCommandEvent} for more information about all the common properties available on this event.
 *
 * @public
 */
class AdminCommandStartedEvent extends AdminCommandEvent {
    /**
     * Should not be instantiated by the user.
     *
     * @internal
     */
    constructor(info, longRunning, timeout) {
        super(info, longRunning);
        /**
         * The timeout for the request, in milliseconds.
         */
        Object.defineProperty(this, "timeout", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.timeout = timeout;
    }
}
exports.AdminCommandStartedEvent = AdminCommandStartedEvent;
/**
 * Event emitted when a command is polling in a long-running operation (i.e. create database).
 *
 * Emits every time the command polls.
 *
 * See {@link AdminCommandEvent} for more information about all the common properties available on this event.
 *
 * @public
 */
class AdminCommandPollingEvent extends AdminCommandEvent {
    /**
     * Should not be instantiated by the user.
     *
     * @internal
     */
    constructor(info, started, interval) {
        super(info, true);
        /**
         * The elapsed time since the command was started, in milliseconds.
         */
        Object.defineProperty(this, "elapsed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The polling interval, in milliseconds.
         */
        Object.defineProperty(this, "interval", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.elapsed = (0, api_1.hrTimeMs)() - started;
        this.interval = interval;
    }
}
exports.AdminCommandPollingEvent = AdminCommandPollingEvent;
/**
 * Event emitted when an admin command has succeeded, after any necessary polling.
 *
 * See {@link AdminCommandEvent} for more information about all the common properties available on this event.
 *
 * @public
 */
class AdminCommandSucceededEvent extends AdminCommandEvent {
    /**
     * Should not be instantiated by the user.
     *
     * @internal
     */
    constructor(info, longRunning, data, started) {
        super(info, longRunning);
        /**
         * The duration of the command, in milliseconds.
         */
        Object.defineProperty(this, "duration", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The response body of the command, if any.
         */
        Object.defineProperty(this, "resBody", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.duration = (0, api_1.hrTimeMs)() - started;
        this.resBody = data || undefined;
    }
}
exports.AdminCommandSucceededEvent = AdminCommandSucceededEvent;
/**
 * Event emitted when an admin command has errored.
 *
 * See {@link AdminCommandEvent} for more information about all the common properties available on this event.
 *
 * @public
 */
class AdminCommandFailedEvent extends AdminCommandEvent {
    /**
     * Should not be instantiated by the user.
     *
     * @internal
     */
    constructor(info, longRunning, error, started) {
        super(info, longRunning);
        /**
         * The duration of the command, in milliseconds.
         */
        Object.defineProperty(this, "duration", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The error that occurred.
         *
         * Typically, some {@link DevOpsAPIError}, commonly a {@link DevOpsAPIResponseError} or sometimes a
         * {@link DevOpsUnexpectedStateError}
         */
        Object.defineProperty(this, "error", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.duration = (0, api_1.hrTimeMs)() - started;
        this.error = error;
    }
}
exports.AdminCommandFailedEvent = AdminCommandFailedEvent;
//# sourceMappingURL=events.js.map