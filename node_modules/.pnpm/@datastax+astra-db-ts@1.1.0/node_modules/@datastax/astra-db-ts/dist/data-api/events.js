"use strict";
// Copyright DataStax, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandFailedEvent = exports.CommandSucceededEvent = exports.CommandStartedEvent = exports.CommandEvent = void 0;
const api_1 = require("../api");
/**
 * Common base class for all command events.
 *
 * **Note that these emit *real* commands, not any abstracted commands like "bulkWrite", "insertMany", or "deleteAll",
 * which have to be translated into appropriate Data API commands.**
 *
 * @public
 */
class CommandEvent {
    /**
     * Should not be instantiated directly.
     *
     * @internal
     */
    constructor(info) {
        /**
         * The command object. Equal to the response body of the HTTP request.
         *
         * Note that this is the actual raw command object; it's not necessarily 1:1 with methods called on the collection/db.
         *
         * For example, a `deleteAll` method on a collection will be translated into a `deleteMany` command, and a `bulkWrite`
         * method will be translated into a series of `insertOne`, `updateOne`, etc. commands.
         *
         * @example
         * ```typescript
         * {
         * Â  insertOne: { document: { name: 'John' } }
         * }
         * ```
         */
        Object.defineProperty(this, "command", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The namespace the command is being run in.
         */
        Object.defineProperty(this, "namespace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The collection the command is being run on, if applicable.
         */
        Object.defineProperty(this, "collection", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The command name.
         *
         * This is the key of the command object. For example, if the command object is
         * `{ insertOne: { document: { name: 'John' } } }`, the command name is `insertOne`.
         *
         * Meaning, abstracted commands like `bulkWrite`, or `deleteAll` will be shown as their actual command equivalents.
         */
        Object.defineProperty(this, "commandName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The URL the command is being sent to.
         */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.command = info.command;
        this.namespace = info.namespace || api_1.DEFAULT_NAMESPACE;
        this.collection = info.collection;
        this.commandName = Object.keys(info.command)[0];
        this.url = info.url;
    }
}
exports.CommandEvent = CommandEvent;
/**
 * Emitted when a command is started, before the initial HTTP request is made.
 *
 * **Note that these emit *real* commands, not any abstracted commands like "bulkWrite", "insertMany", or "deleteAll",
 * which have to be translated into appropriate Data API commands.**
 *
 * See {@link CommandEvent} for more information about all the common properties available on this event.
 *
 * @public
 */
class CommandStartedEvent extends CommandEvent {
    /**
     * Should not be instantiated by the user.
     *
     * @internal
     */
    constructor(info) {
        super(info);
        /**
         * The timeout for the command, in milliseconds.
         */
        Object.defineProperty(this, "timeout", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.timeout = info.timeoutManager.ms;
    }
}
exports.CommandStartedEvent = CommandStartedEvent;
/**
 * Emitted when a command has succeeded.
 *
 * **Note that these emit *real* commands, not any abstracted commands like "bulkWrite", "insertMany", or "deleteAll",
 * which have to be translated into appropriate Data API commands.**
 *
 * See {@link CommandEvent} for more information about all the common properties available on this event.
 *
 * @public
 */
class CommandSucceededEvent extends CommandEvent {
    /**
     * Should not be instantiated by the user.
     *
     * @internal
     */
    constructor(info, reply, started) {
        super(info);
        /**
         * The duration of the command, in milliseconds. Starts counting from the moment of the initial HTTP request.
         */
        Object.defineProperty(this, "duration", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The response object from the Data API.
         */
        Object.defineProperty(this, "resp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.duration = (0, api_1.hrTimeMs)() - started;
        this.resp = reply;
    }
}
exports.CommandSucceededEvent = CommandSucceededEvent;
/**
 * Emitted when a command has errored.
 *
 * **Note that these emit *real* commands, not any abstracted commands like "bulkWrite", "insertMany", or "deleteAll",
 * which have to be translated into appropriate Data API commands.**
 *
 * See {@link CommandEvent} for more information about all the common properties available on this event.
 *
 * @public
 */
class CommandFailedEvent extends CommandEvent {
    /**
     * Should not be instantiated by the user.
     *
     * @internal
     */
    constructor(info, error, started) {
        super(info);
        /**
         * The duration of the command, in milliseconds.
         */
        Object.defineProperty(this, "duration", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The error that caused the command to fail.
         *
         * Typically, some {@link DataAPIError}, commonly a {@link DataAPIResponseError} or one of its subclasses.
         */
        Object.defineProperty(this, "error", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.duration = (0, api_1.hrTimeMs)() - started;
        this.error = error;
    }
}
exports.CommandFailedEvent = CommandFailedEvent;
//# sourceMappingURL=events.js.map