"use strict";
// Copyright DataStax, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectId = exports.UUID = void 0;
const uuidv7_1 = require("uuidv7");
const bson_objectid_1 = __importDefault(require("bson-objectid"));
const uuidRegex = new RegExp('^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$');
/**
 * Represents a UUID that can be used as an _id in the DataAPI.
 *
 * Provides methods for creating v4 and v7 UUIDs, and for parsing timestamps from v7 UUIDs.
 *
 * @example
 * ```typescript
 * const collection = await db.createCollection('myCollection'. {
 *   defaultId: {
 *     type: 'uuidv7',
 *   },
 * });
 *
 * await collection.insertOne({ album: 'Jomsviking' });
 *
 * const doc = await collection.findOne({ album: 'Jomsviking' });
 *
 * // Prints the UUID of the document
 * console.log(doc._id.toString());
 *
 * // Prints the timestamp when the document was created (server time)
 * console.log(doc._id.getTimestamp());
 * ```
 *
 * @example
 * ```typescript
 * await collection.insertOne({ _id: UUID.v4(), album: 'Berserker' });
 *
 * const doc = await collection.findOne({ album: 'Berserker' });
 *
 * // Prints the UUID of the document
 * console.log(doc._id.toString());
 *
 * // Undefined, as the document was created with a v4 UUID
 * console.log(doc._id.getTimestamp());
 * ```
 *
 * @see ObjectId
 *
 * @public
 */
class UUID {
    /**
     * Creates a new UUID instance.
     *
     * Use `UUID.v4()` or `UUID.v7()` to generate random new UUIDs.
     *
     * @param uuid - The UUID string.
     * @param validate - Whether to validate the UUID string. Defaults to `true`.
     */
    constructor(uuid, validate) {
        /**
         * The version of the UUID.
         */
        Object.defineProperty(this, "version", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_uuid", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        if (validate !== false) {
            if (typeof uuid !== 'string') {
                throw new Error('UUID must be a string');
            }
            if (uuid.length !== 36 || !uuidRegex.test(uuid)) {
                throw new Error('UUID must be a 36-character hex string');
            }
        }
        this._uuid = uuid.toLowerCase();
        Object.defineProperty(this, 'version', {
            value: parseInt(this._uuid[14], 16),
            writable: false,
        });
    }
    /**
     * Compares this UUID to another UUID.
     *
     * **The other UUID can be a UUID instance or a string.**
     *
     * A UUID is considered equal to another UUID if their lowercase string representations are equal.
     *
     * @param other - The UUID to compare to.
     *
     * @returns `true` if the UUIDs are equal, `false` otherwise.
     */
    equals(other) {
        if (typeof other === 'string') {
            return this._uuid === other;
        }
        if (other instanceof UUID) {
            return this._uuid === other._uuid;
        }
        return false;
    }
    /**
     * Returns the timestamp of a v7 UUID. If the UUID is not a v7 UUID, this method returns `undefined`.
     *
     * @returns The timestamp of the UUID, or `undefined` if the UUID is not a v7 UUID.
     */
    getTimestamp() {
        return timestampFromUUID(this);
    }
    /**
     * Returns the string representation of the UUID in lowercase.
     */
    toString() {
        return this._uuid;
    }
    /**
     * Creates a new v4 UUID.
     */
    static v4() {
        return new UUID((0, uuidv7_1.uuidv4)(), false);
    }
    /**
     * Creates a new v7 UUID.
     */
    static v7() {
        return new UUID((0, uuidv7_1.uuidv7)(), false);
    }
    /**
     * Inspects the UUID.
     */
    inspect() {
        return `UUID("${this.toString()}")`;
    }
    /**
     * Converts the UUID to a JSON representation.
     *
     * Serializes to `{ $uuid: 'uuid' }`.
     */
    toJSON() {
        return { $uuid: this.toString() };
    }
}
exports.UUID = UUID;
const objectIdRegex = new RegExp('^[0-9a-fA-F]{24}$');
/**
 * Represents an ObjectId that can be used as an _id in the DataAPI.
 *
 * Provides methods for generating ObjectIds and getting the timestamp of an ObjectId.
 *
 * @example
 * ```typescript
 * const collection = await db.createCollection('myCollection'. {
 *   defaultId: {
 *     type: 'objectId',
 *   },
 * });
 *
 * await collection.insertOne({ album: 'Inhuman Rampage' });
 *
 * const doc = await collection.findOne({ album: 'Inhuman Rampage' });
 *
 * // Prints the ObjectId of the document
 * console.log(doc._id.toString());
 *
 * // Prints the timestamp when the document was created (server time)
 * console.log(doc._id.getTimestamp());
 * ```
 *
 * @example
 * ```typescript
 * await collection.insertOne({ _id: new ObjectId(), album: 'Sacrificium' });
 *
 * const doc = await collection.findOne({ album: 'Sacrificium' });
 *
 * // Prints the ObjectId of the document
 * console.log(doc._id.toString());
 *
 * // Prints the timestamp when the document was created (server time)
 * console.log(doc._id.getTimestamp());
 * ```
 *
 * @public
 */
class ObjectId {
    /**
     * Creates a new ObjectId instance.
     *
     * If `id` is provided, it must be a 24-character hex string. Otherwise, a new ObjectId is generated.
     *
     * @param id - The ObjectId string.
     * @param validate - Whether to validate the ObjectId string. Defaults to `true`.
     */
    constructor(id, validate = true) {
        Object.defineProperty(this, "_objectId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        if (validate) {
            if (typeof id === 'string') {
                if (id.length !== 24 || !objectIdRegex.test(id)) {
                    throw new Error('ObjectId must be a 24-character hex string');
                }
            }
            else if (id !== undefined && id !== null) {
                throw new Error('ObjectId must be a string');
            }
        }
        this._objectId = (id) ? (0, bson_objectid_1.default)(id) : (0, bson_objectid_1.default)();
    }
    /**
     * Compares this ObjectId to another ObjectId.
     *
     * **The other ObjectId can be an ObjectId instance or a string.**
     *
     * An ObjectId is considered equal to another ObjectId if their string representations are equal.
     *
     * @param other - The ObjectId to compare to.
     *
     * @returns `true` if the ObjectIds are equal, `false` otherwise.
     */
    equals(other) {
        return this._objectId.equals((other && typeof other === 'object' && '_objectId' in other ? other._objectId : other));
    }
    /**
     * Returns the timestamp of the ObjectId.
     *
     * @returns The timestamp of the ObjectId.
     */
    getTimestamp() {
        return this._objectId.getTimestamp();
    }
    /**
     * Returns the string representation of the ObjectId.
     */
    toString() {
        return this._objectId.toString();
    }
    /**
     * Inspects the ObjectId.
     */
    inspect() {
        return `ObjectId("${this.toString()}")`;
    }
    /**
     * Converts the ObjectId to a JSON representation.
     *
     * Serializes to `{ $objectId: 'objectId' }`.
     */
    toJSON() {
        return { $objectId: this.toString() };
    }
}
exports.ObjectId = ObjectId;
function timestampFromUUID(uuid) {
    if (uuid.version !== 7) {
        return undefined;
    }
    const timestampBytes = new Uint8Array(8);
    timestampBytes.set(new Uint8Array(uuidv7_1.UUID.parse(uuid.toString()).bytes.buffer.slice(0, 6)), 2);
    const timestampMs = new DataView(timestampBytes.buffer).getBigUint64(0);
    return new Date(Number(timestampMs));
}
//# sourceMappingURL=ids.js.map