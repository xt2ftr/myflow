"use strict";
// Copyright DataStax, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeSort = exports.validateOption = exports.replaceAstraUrlIdAndRegion = exports.extractDbIdFromUrl = exports.takeWhile = void 0;
/**
 * @internal
 */
function takeWhile(arr, pred) {
    const result = [];
    for (let i = 0, n = arr.length; i < n && pred(arr[i]); i++) {
        result.push(arr[i]);
    }
    return result;
}
exports.takeWhile = takeWhile;
/**
 * @internal
 */
function extractDbIdFromUrl(uri) {
    return new URL(uri).hostname.match(/^[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/)?.[0];
}
exports.extractDbIdFromUrl = extractDbIdFromUrl;
/**
 * @internal
 */
function replaceAstraUrlIdAndRegion(uri, id, region) {
    const url = new URL(uri);
    const parts = url.hostname.split('.');
    parts[0] = id + '-' + region;
    url.hostname = parts.join('.');
    return url.toString().slice(0, -1);
}
exports.replaceAstraUrlIdAndRegion = replaceAstraUrlIdAndRegion;
/**
 * @internal
 */
function validateOption(name, obj, type, test) {
    if (obj === null || obj === undefined) {
        return;
    }
    if (typeof obj !== type) {
        throw new TypeError(`Invalid ${name}; expected a ${type} value, or undefined/null`);
    }
    test?.(obj);
}
exports.validateOption = validateOption;
/**
 * @internal
 */
const normalizeSort = (sort) => {
    const ret = {};
    for (const key in sort) {
        switch (sort[key]) {
            case 1:
            case 'asc':
            case 'ascending':
                ret[key] = 1;
                break;
            case -1:
            case 'desc':
            case 'descending':
                ret[key] = -1;
                break;
            default:
                ret[key] = sort[key];
        }
    }
    return ret;
};
exports.normalizeSort = normalizeSort;
//# sourceMappingURL=utils.js.map