"use strict";
// Copyright DataStax, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _HttpClient_applicationToken;
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildUserAgent = exports.hrTimeMs = exports.HttpClient = void 0;
const constants_1 = require("../api/constants");
const fetch_h2_1 = require("fetch-h2");
/**
 * @internal
 */
class HttpClient {
    constructor(options) {
        Object.defineProperty(this, "baseUrl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "emitter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "monitorCommands", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "fetchCtx", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        _HttpClient_applicationToken.set(this, void 0);
        Object.defineProperty(this, "baseHeaders", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        __classPrivateFieldSet(this, _HttpClient_applicationToken, options.applicationToken, "f");
        this.baseUrl = options.baseUrl;
        this.emitter = options.emitter;
        this.monitorCommands = options.monitorCommands;
        this.fetchCtx = options.fetchCtx;
        if (options.baseApiPath) {
            this.baseUrl += '/' + options.baseApiPath;
        }
        this.baseHeaders = options.mkAuthHeader?.(__classPrivateFieldGet(this, _HttpClient_applicationToken, "f")) ?? {};
    }
    get applicationToken() {
        return __classPrivateFieldGet(this, _HttpClient_applicationToken, "f");
    }
    async _request(info) {
        if (this.fetchCtx.closed.ref) {
            throw new Error('Can\'t make requests on a closed client');
        }
        if (info.timeoutManager.msRemaining <= 0) {
            throw info.timeoutManager.mkTimeoutError(info);
        }
        const params = info.params ?? {};
        Object.keys(params).forEach(key => params[key] === undefined && delete params[key]);
        const url = (Object.keys(params).length > 0)
            ? `${info.url}?${new URLSearchParams(params).toString()}`
            : info.url;
        try {
            const resp = await this.fetchCtx.preferred.fetch(url, {
                body: info.data,
                method: info.method,
                timeout: info.timeoutManager.msRemaining,
                headers: this.baseHeaders,
            });
            resp.body = await resp.text();
            return resp;
        }
        catch (e) {
            if (e instanceof fetch_h2_1.TimeoutError) {
                throw info.timeoutManager.mkTimeoutError(info);
            }
            throw e;
        }
    }
}
exports.HttpClient = HttpClient;
_HttpClient_applicationToken = new WeakMap();
/**
 * @internal
 */
function hrTimeMs() {
    const hrtime = process.hrtime();
    return Math.floor(hrtime[0] * 1000 + hrtime[1] / 1000000);
}
exports.hrTimeMs = hrTimeMs;
/**
 * @internal
 */
function buildUserAgent(caller) {
    const callers = ((!caller)
        ? [] :
        Array.isArray(caller[0])
            ? caller
            : [caller]);
    const callerString = callers.map((c) => {
        return c[1] ? `${c[0]}/${c[1]}` : c[0];
    }).join(' ');
    return `${constants_1.RAGSTACK_REQUESTED_WITH} ${callerString} ${constants_1.CLIENT_USER_AGENT}`.trim();
}
exports.buildUserAgent = buildUserAgent;
//# sourceMappingURL=http-client.js.map