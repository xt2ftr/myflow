"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
const vitest_1 = require("vitest");
(0, vitest_1.describe)("tokenizeAndEstimateCost", () => {
    (0, vitest_1.it)("should tokenize and estimate cost correctly", () => __awaiter(void 0, void 0, void 0, function* () {
        (0, vitest_1.expect)(yield (0, index_1.tokenizeAndEstimateCost)({
            model: "gpt-4-0125-preview",
            input: "Hello, world!",
            output: "Hi there, how are you?",
        })).toEqual({
            inputTokens: 4,
            outputTokens: 7,
            cost: 0.00025,
        });
    }));
});
(0, vitest_1.describe)("estimateCost", () => {
    (0, vitest_1.it)("should estimate cost correctly", () => {
        (0, vitest_1.expect)((0, index_1.estimateCost)({
            model: "gpt-4-0125-preview",
            inputTokens: 3000,
            outputTokens: 2100,
        })).toBe(0.093);
    });
    (0, vitest_1.it)("should estimate cost correctly for embeddings model", () => {
        (0, vitest_1.expect)((0, index_1.estimateCost)({
            model: "text-embedding-ada-002",
            inputTokens: 3000,
        })).toBe(0.0003);
    });
});
